#! /usr/bin/env python3

"""
Used to generate senzing/unmarshal_test.go
"""

import json
import logging
import os
import re
from datetime import datetime, timezone

INPUT_FILE = "bin/response-testcases.json"
OUTPUT_FILE = "response/response_test.go"

# -----------------------------------------------------------------------------
# --- Output templates
# -----------------------------------------------------------------------------

OUTPUT_HEADER = """// DO NOT EDIT.  This code is generated.
// Generated by: sz-sdk-go/bin/generate_senzing_unmarshal_test.py
// Generated for: sz-sdk-go/senzing/unmarshal_test.go
"""

OUTPUT_HEADER += f"// Generated date: {datetime.now(timezone.utc).isoformat()}\n"

# noqa: E101
OUTPUT_HEADER += """
package response

import (
	"context"
	"fmt"
	"testing"

	truncator "github.com/aquilax/truncate"
	"github.com/stretchr/testify/require"
)

const (
	defaultTruncation = 127
	printResults      = false
)

// ----------------------------------------------------------------------------
// Internal functions
// ----------------------------------------------------------------------------

func truncate(aString string, length int) string {
	return truncator.Truncate(aString, length, "...", truncator.PositionEnd)
}

func printResult(test *testing.T, title string, result interface{}) {
	if printResults {
		test.Logf("%s: %+v", title, truncate(fmt.Sprintf("%+v", result), defaultTruncation))
	}
}

func printActual(test *testing.T, actual interface{}) {
	printResult(test, "Actual", actual)
}

// ----------------------------------------------------------------------------
// Test interface functions
// ----------------------------------------------------------------------------
"""  # noqa: E101, W191

TEST_FUNCTION_TEMPLATE = f"""
	ctx := context.TODO()
	jsonString := `{{json}}`
	result, err := {{struct}}(ctx, jsonString)
	require.NoError(test, err)
	printActual(test, result)
"""  # noqa: E101,F541,W191

TEST_FUNCTION_TEMPLATE_BAD = f"""
	ctx := context.TODO()
	badJsonString := `{{json}}`
	result, err := {{struct}}(ctx, badJsonString)
	require.Error(test, err)
	printActual(test, result)
"""  # noqa: E101,F541,W191

OUTPUT_FOOTER = """
"""

# -----------------------------------------------------------------------------
# --- Helpers
# -----------------------------------------------------------------------------


def canonical_json(json_object):
    """Create compact JSON.  No spaces."""
    result = json.dumps(json_object, sort_keys=True, separators=(",", ":"))
    return result


def canonical_testcase_name(testcase_name):
    return re.sub("[^0-9a-zA-Z]+", "", testcase_name).capitalize()


# -----------------------------------------------------------------------------
# --- Main
# -----------------------------------------------------------------------------

# Set up logging.

logging.basicConfig(format="%(asctime)s %(message)s", level=logging.INFO)

# Prolog.

logging.info("{0}".format("-" * 80))
logging.info("--- {0} - Begin".format(os.path.basename(__file__)))
logging.info("{0}".format("-" * 80))

# Load testcase metadata.

with open(INPUT_FILE, encoding="utf-8") as input_file:
    response_testcases = json.load(input_file)

# Write testcase file.

with open(OUTPUT_FILE, "w", encoding="utf-8") as file:
    file.write(OUTPUT_HEADER)
    for senzing_api_class, senzing_api_class_data in response_testcases.items():
        metadata = senzing_api_class_data.get("metadata", {})
        if metadata.get("goSkip", False):
            continue
        tests = senzing_api_class_data.get("tests", {})
        for testcase_name, testcase_json in tests.items():
            file.write(
                "\nfunc Test{0}{1}(test *testing.T) {{".format(
                    senzing_api_class, canonical_testcase_name(testcase_name)
                )
            )
            file.write(
                TEST_FUNCTION_TEMPLATE.format(
                    json=canonical_json(testcase_json), struct=senzing_api_class
                )
            )
            file.write("}")
    for senzing_api_class, senzing_api_class_data in response_testcases.items():
        metadata = senzing_api_class_data.get("metadata", {})
        if metadata.get("goSkip", False):
            continue
        tests = senzing_api_class_data.get("tests", {})
        for testcase_name, testcase_json in tests.items():
            file.write(
                "\nfunc Test{0}_Bad_{1}(test *testing.T) {{".format(
                    senzing_api_class, canonical_testcase_name(testcase_name)
                )
            )
            file.write(
                TEST_FUNCTION_TEMPLATE_BAD.format(
                    json="This is not JSON", struct=senzing_api_class
                )
            )
            file.write("}")
    file.write(OUTPUT_FOOTER)

# Epilog.

logging.info("{0}".format("-" * 80))
logging.info("--- {0} - End".format(os.path.basename(__file__)))
logging.info("{0}".format("-" * 80))
